// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// default pharmacy id
	DefaultPharmacyID int64 `json:"default_pharmacy_id"`

	// email
	// Format: email
	Email strfmt.Email `json:"email"`

	// id
	ID int64 `json:"id"`

	// name
	Name string `json:"name"`

	// role
	// Enum: [admin apothecary]
	Role string `json:"role"`

	// surname
	Surname string `json:"surname"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

var userTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","apothecary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeRolePropEnum = append(userTypeRolePropEnum, v)
	}
}

const (

	// UserRoleAdmin captures enum value "admin"
	UserRoleAdmin string = "admin"

	// UserRoleApothecary captures enum value "apothecary"
	UserRoleApothecary string = "apothecary"
)

// prop value enum
func (m *User) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
